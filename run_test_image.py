#!/usr/bin/env python3
import os
import sys
import time
import json
from datetime import datetime
from graph_pipeline.graph_structure_extractor import extract_graph_structure
from graph_pipeline.model_manager import load_api_key, get_vision_models, DEFAULT_API_BASE_URL

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    from graph_pipeline.logger import (
        log_api_call, log_function_calls, check_api_budget, 
        require_confirmation, api_cost_warning, init_logging,
        log_test_run
    )
    CUSTOM_LOGGER_ENABLED = True
except ImportError:
    CUSTOM_LOGGER_ENABLED = False
    print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ API-–≤—ã–∑–æ–≤–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", file=sys.stderr)

@log_function_calls(category="TEST") if CUSTOM_LOGGER_ENABLED else lambda x: x
def test_image_recognition(image_path, budget_limit=1.0, require_approval=True):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞."""
    start_time = time.time()
    test_id = f"test_img_{datetime.now().strftime('%Y%m%d%H%M%S')}"
    
    print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_path}")
    if CUSTOM_LOGGER_ENABLED:
        init_logging()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∞
    os.makedirs("logs", exist_ok=True)
    with open(f"logs/test_request_{test_id}.json", "w") as f:
        json.dump({
            "timestamp": datetime.now().isoformat(),
            "test_type": "image_recognition",
            "image_path": image_path,
            "budget_limit": budget_limit
        }, f, indent=2)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á
    api_key = load_api_key()
    if not api_key:
        error_msg = "‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ"
        print(error_msg)
        if CUSTOM_LOGGER_ENABLED:
            log_test_run("test_image_recognition", "ERROR", 
                         (time.time() - start_time) * 1000,
                         {"error_message": error_msg, "image_path": image_path})
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é vision-–º–æ–¥–µ–ª—å
    vision_models = get_vision_models(api_base_url=DEFAULT_API_BASE_URL, api_key=api_key)
    if not vision_models:
        error_msg = "‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ vision-–º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        print(error_msg)
        if CUSTOM_LOGGER_ENABLED:
            log_test_run("test_image_recognition", "ERROR", 
                         (time.time() - start_time) * 1000,
                         {"error_message": error_msg, "image_path": image_path})
        return False
    
    model_id = vision_models[0]['id']
    print(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: {model_id}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—é–¥–∂–µ—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ API-–≤—ã–∑–æ–≤–æ–º
    if CUSTOM_LOGGER_ENABLED:
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        api_cost_warning(model_id, estimated_tokens=1200)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –±—é–¥–∂–µ—Ç
        if not check_api_budget(model_id, 1000, 200, budget_limit, False):
            print(f"‚õî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±—é–¥–∂–µ—Ç–∞ (–ª–∏–º–∏—Ç: ${budget_limit})")
            log_test_run("test_image_recognition", "SKIP", 
                         (time.time() - start_time) * 1000,
                         {"reason": "budget_limit", "image_path": image_path})
            return False
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        if require_approval:
            if not require_confirmation(
                f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏ {model_id}?"
            ):
                print("‚õî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                log_test_run("test_image_recognition", "SKIP", 
                             (time.time() - start_time) * 1000,
                             {"reason": "user_cancelled", "image_path": image_path})
                return False
    
    # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥—Ä–∞—Ñ–∞
    try:
        start_api_time = time.time()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º API
        test_info = {
            "timestamp": datetime.now().isoformat(),
            "image_path": image_path,
            "model_id": model_id,
            "api_base_url": DEFAULT_API_BASE_URL
        }
        with open(f"logs/api_request_{test_id}.json", "w") as f:
            json.dump(test_info, f, indent=2)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º API-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∞
        nodes, edges = extract_graph_structure(
            image_path=image_path,
            model_id=model_id,
            api_key=api_key,
            api_base_url=DEFAULT_API_BASE_URL
        )
        
        api_duration_ms = (time.time() - start_api_time) * 1000
        
        if nodes is None or edges is None:
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥—Ä–∞—Ñ–∞"
            print(error_msg)
            if CUSTOM_LOGGER_ENABLED:
                log_test_run("test_image_recognition", "FAIL", 
                             (time.time() - start_time) * 1000,
                             {"error_message": error_msg, "image_path": image_path, 
                              "api_duration_ms": api_duration_ms})
            return False
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ª–æ–≥-—Ñ–∞–π–ª
        result_info = {
            "timestamp": datetime.now().isoformat(),
            "image_path": image_path,
            "model_id": model_id,
            "api_duration_ms": api_duration_ms,
            "nodes": nodes,
            "edges": edges
        }
        with open(f"logs/api_result_{test_id}.json", "w") as f:
            json.dump(result_info, f, indent=2)
        
        print("\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:")
        print(f"–í–µ—Ä—à–∏–Ω—ã: {nodes}")
        print(f"–†—ë–±—Ä–∞: {edges}")
        
        if CUSTOM_LOGGER_ENABLED:
            log_test_run("test_image_recognition", "PASS", 
                         (time.time() - start_time) * 1000,
                         {"nodes_count": len(nodes), "edges_count": len(edges), 
                          "image_path": image_path, "api_duration_ms": api_duration_ms})
        
        return True
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {e}"
        print(error_msg)
        
        if CUSTOM_LOGGER_ENABLED:
            log_test_run("test_image_recognition", "ERROR", 
                         (time.time() - start_time) * 1000,
                         {"error_message": str(e), "image_path": image_path})
        return False

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {sys.argv[0]} <–ø—É—Ç—å_–∫_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é>")
        sys.exit(1)
    
    image_path = sys.argv[1]
    if not os.path.exists(image_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {image_path}")
        sys.exit(1)
    
    success = test_image_recognition(image_path)
    sys.exit(0 if success else 1)
