"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è pytest —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤.
"""
import os
import time
import pytest
import logging
from typing import Dict, Any, Optional, Union, List

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    from graph_pipeline.logger import log_test_run, init_logging
    CUSTOM_LOGGER_ENABLED = True
except ImportError:
    CUSTOM_LOGGER_ENABLED = False
    print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤
test_stats = {
    "total": 0,
    "passed": 0,
    "failed": 0,
    "errors": 0,
    "skipped": 0,
    "start_time": time.time(),
    "tests": []
}

@pytest.hookimpl(tryfirst=True)
def pytest_configure(config):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤."""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é logs –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("logs", exist_ok=True)
    
    if CUSTOM_LOGGER_ENABLED:
        init_logging(logging.INFO)
        logging.info("üöÄ –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è pytest —Ç–µ—Å—Ç–æ–≤")
    
@pytest.hookimpl(trylast=True)
def pytest_sessionfinish(session, exitstatus):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤."""
    duration = time.time() - test_stats["start_time"]
    
    summary = (
        f"\n===== –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ =====\n"
        f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {test_stats['total']}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {test_stats['passed']}\n"
        f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {test_stats['failed']}\n"
        f"‚ö†Ô∏è –û—à–∏–±–∫–∏: {test_stats['errors']}\n"
        f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {test_stats['skipped']}\n"
        f"–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥\n"
        f"================================="
    )
    
    print(summary)
    
    if CUSTOM_LOGGER_ENABLED:
        logging.info(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤. –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: {exitstatus}")
        logging.info(summary)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–∞—Ö –≤ —Ñ–∞–π–ª
        try:
            import json
            with open("logs/test_summary.json", "w") as f:
                json.dump(test_stats, f, indent=2)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Ç–µ—Å—Ç–∞–º: {e}")

@pytest.hookimpl(tryfirst=True)
def pytest_runtest_protocol(item, nextitem):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞."""
    test_stats["total"] += 1
    return None  # –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

@pytest.hookimpl(tryfirst=True)
def pytest_runtest_setup(item):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–∞."""
    if CUSTOM_LOGGER_ENABLED:
        logging.info(f"‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {item.name}")

@pytest.hookimpl(tryfirst=True)
def pytest_runtest_teardown(item):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞."""
    if CUSTOM_LOGGER_ENABLED:
        logging.debug(f"‚èπÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞: {item.name}")

@pytest.hookimpl(trylast=True)
def pytest_runtest_logreport(report):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞."""
    if report.when == "call" or (report.when == "setup" and report.outcome != "passed"):
        test_name = report.nodeid
        status = report.outcome.upper()
        duration_ms = report.duration * 1000 if hasattr(report, 'duration') else 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if status == "PASSED":
            test_stats["passed"] += 1
        elif status == "FAILED":
            test_stats["failed"] += 1
        elif status == "SKIPPED":
            test_stats["skipped"] += 1
        elif status == "ERROR":
            test_stats["errors"] += 1
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        details = {}
        if hasattr(report, "longrepr") and report.longrepr:
            details["error_message"] = str(report.longrepr)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ –≤ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        test_info = {
            "name": test_name,
            "status": status,
            "duration_ms": duration_ms,
            **details
        }
        test_stats["tests"].append(test_info)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        if CUSTOM_LOGGER_ENABLED:
            log_test_run(test_name, status, duration_ms, details)
        else:
            # –ü—Ä–æ—Å—Ç–æ–π –≤—ã–≤–æ–¥ –µ—Å–ª–∏ –ª–æ–≥–≥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            status_marker = "‚úì" if status == "PASSED" else "‚úó" if status == "FAILED" else "-"
            print(f"{status_marker} {test_name} ({duration_ms:.2f} ms) - {status}")

@pytest.fixture(scope="function")
def log_test_context(request):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–µ—Å—Ç–∞."""
    test_name = request.node.name
    if CUSTOM_LOGGER_ENABLED:
        logging.info(f"üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ—Å—Ç–∞ {test_name}: {request.function.__doc__ or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}")
    yield
    # –ö–æ–¥ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

# –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ pytest
def pytest_configure(config):
    config.addinivalue_line("markers", "api_call: –º–∞—Ä–∫–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö API-–≤—ã–∑–æ–≤—ã")
    config.addinivalue_line("markers", "expensive: –º–∞—Ä–∫–µ—Ä –¥–ª—è –¥–æ—Ä–æ–≥–æ—Å—Ç–æ—è—â–∏—Ö —Ç–µ—Å—Ç–æ–≤")
    config.addinivalue_line("markers", "visual_check: –º–∞—Ä–∫–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")

# –ö–æ–º–∞–Ω–¥–Ω–∞—è –æ–ø—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–æ—Ä–æ–≥–∏—Ö —Ç–µ—Å—Ç–æ–≤
def pytest_addoption(parser):
    parser.addoption("--expensive", action="store_true", default=False, 
                     help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–æ—Ä–æ–≥–æ—Å—Ç–æ—è—â–∏–µ —Ç–µ—Å—Ç—ã (API-–≤—ã–∑–æ–≤—ã)")
    parser.addoption("--api-budget", type=float, default=1.0,
                     help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç –¥–ª—è API-–≤—ã–∑–æ–≤–æ–≤ (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö)")

# –ü—Ä–æ–ø—É—Å–∫ –¥–æ—Ä–æ–≥–æ—Å—Ç–æ—è—â–∏—Ö —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–ª–∞–≥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
def pytest_collection_modifyitems(config, items):
    if not config.getoption("--expensive"):
        expensive_tests = pytest.mark.skip(reason="–ù—É–∂–Ω–∞ –æ–ø—Ü–∏—è --expensive –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
        for item in items:
            if "expensive" in item.keywords:
                item.add_marker(expensive_tests)
            if "api_call" in item.keywords:
                item.add_marker(expensive_tests)
