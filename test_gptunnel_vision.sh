#!/bin/bash
# –¢–µ—Å—Ç vision-–∑–∞–ø—Ä–æ—Å–∞ –∫ gptunnel.ru (OpenAI API —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
set -e

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è curl
CURL_TIMEOUT=90

echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç OpenAI Vision API —á–µ—Ä–µ–∑ gptunnel.ru..."

# –ü–æ–ª—É—á–∞–µ–º API_KEY –∏–∑ .env
if [ -f .env ]; then
  export $(grep -v '^#' .env | xargs)
fi

if [ -z "$OPENAI_API_KEY" ]; then
  echo "OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!" >&2
  exit 1
fi

IMG_PATH="testimages/testimage.png"
if [ ! -f "$IMG_PATH" ]; then
  echo "–§–∞–π–ª $IMG_PATH –Ω–µ –Ω–∞–π–¥–µ–Ω!" >&2
  exit 1
fi

echo "üñºÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ($IMG_PATH)..."
echo "‚öôÔ∏è –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $(du -h "$IMG_PATH" | cut -f1)"

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64 –±–µ–∑ –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
echo "‚è≥ –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64..."
IMG_B64=$(base64 -w 0 "$IMG_PATH")
echo "‚úì –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"

echo "üìù –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API..."
read -r -d '' DATA <<EOF
{
  "model": "gpt-4o",
  "messages": [
    {"role": "system", "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –≥—Ä–∞—Ñ–æ–≤."},
    {"role": "user", "content": [
      {"type": "text", "text": "–û–ø—Ä–µ–¥–µ–ª–∏ —Å–ø–∏—Å–æ–∫ –≤–µ—Ä—à–∏–Ω –∏ —Ä—ë–±–µ—Ä –≥—Ä–∞—Ñ–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –û—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Python: nodes = [...]; edges = [...]. –ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."},
      {"type": "image_url", "image_url": {"url": "data:image/png;base64,$IMG_B64"}}
    ]}
  ],
  "max_tokens": 512
}
EOF

echo "üìã –ó–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–º $(wc -c < "$IMG_PATH") –±–∞–π—Ç"

echo -n "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ gptunnel.ru [$(date +"%H:%M:%S")]... "

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —É—Ç–∏–ª–∏—Ç—ã jq
if ! command -v jq &> /dev/null; then
    echo "‚ö†Ô∏è –£—Ç–∏–ª–∏—Ç–∞ jq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í—ã–≤–æ–¥ –±—É–¥–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."
    HAS_JQ=false
else
    HAS_JQ=true
fi

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
START_TIME=$(date +%s)

# –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –≤—ã–≤–æ–¥–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
RESPONSE=$(curl --silent \
  --write-out "\n‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: %{time_total} —Å–µ–∫, HTTP-–∫–æ–¥: %{http_code}" \
  --request POST \
  --url https://gptunnel.ru/v1/chat/completions \
  --header "Authorization: Bearer $OPENAI_API_KEY" \
  --header 'Content-Type: application/json' \
  --max-time $CURL_TIMEOUT \
  --data "$DATA")

# –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
END_TIME=$(date +%s)
DURATION=$((END_TIME - START_TIME))

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
HTTP_CODE=$(echo "$RESPONSE" | grep -o "HTTP-–∫–æ–¥: [0-9]*" | cut -d' ' -f2)
echo "‚úÖ –ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω [$(date +"%H:%M:%S")], –æ–±—â–µ–µ –≤—Ä–µ–º—è: ${DURATION} —Å–µ–∫"

echo "üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API:"
if [[ "$HAS_JQ" == true ]]; then
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—É—é —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é jq
    CONTENT=$(echo "$RESPONSE" | head -n 1 | jq -r '.choices[0].message.content' 2>/dev/null)
    if [[ $? -eq 0 && -n "$CONTENT" ]]; then
        echo "$CONTENT"
    else
        echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ:"
        echo "$RESPONSE" | head -n 1
    fi
else
    # –ï—Å–ª–∏ jq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤—ã–≤–æ–¥–∏–º –≤–µ—Å—å JSON-–æ—Ç–≤–µ—Ç
    echo "$RESPONSE" | head -n 1
fi
